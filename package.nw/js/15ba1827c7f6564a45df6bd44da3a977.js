;!function(require, directRequire){;"use strict";const interruptibletask_1=require('./f87c21baecac660695b0d3124dbebed6.js'),request=require('./233d77ecf0781f44985f684f70e316d0.js'),loginManager=require('./89ba85d67a88f7636d657c22b5d3e038.js'),errcodeConfig=require('./df6d0ff021a69fb541c733de4dbba0fe.js'),userActions=require('./9c906d27ca74e18d0deaaa231e71fdfa.js'),store=require('./bc78839ccca8df9e5ceeb7fae11b7be2.js'),projectManager=require('./3bfffbe88b3d923921f851c0697974fe.js'),tools=require('./d3976cc01aeebc5b09e11c4135b6bd8d.js'),locales=require('./common/locales/index.js'),log=require('./72653d4b93cdd7443296229431a7aa9a.js'),{NOT_LOGIN,INVALID_TOKEN,INVALID_LOGIN,DEV_NEED_RELOGIN,DEV_INVALID_SIGNATURE,DEV_EXPIRED_SIGNATURE}=errcodeConfig,os="darwin"===process.platform?"darwin":"win",appVersion=global.appVersion.replace(/\./g,""),isNeedRelogin=(a)=>{a===NOT_LOGIN||a===INVALID_TOKEN||a===DEV_NEED_RELOGIN||a===DEV_EXPIRED_SIGNATURE||a===DEV_INVALID_SIGNATURE?store.dispatch(userActions.loginExpired()):void 0},formateQuery=async(a)=>{const b=Object.assign({},a),{project:c,needRandom:d,needAppID:e,needSystemInfo:f,needToken:g,forceLogin:h}=b;delete b.project,delete b.needRandom,delete b.needAppID,delete b.needSystemInfo,delete b.needToken,delete b.forceLogin,delete b.needParse,delete b.needCheckErrCode,delete b.needCheckStatusCode;const i=(b.url||"").split("?"),j=i[0],k=[];if(-1!==d&&k.push(`_r=${Math.random()}`),1===g)try{const a=await loginManager.getNewTicket();k.push(`newticket=${a}`)}catch(a){if(-1!==h)throw isNeedRelogin(a),locales.config.CGI_ERR_NEED_RELOGIN}return 1===e&&k.push(`${projectManager.formatAppIDQuery(c)}`),-1!==f&&k.push(`os=${os}&clientversion=${appVersion}`),i[1]&&k.push(i[1]),b.url=`${j}?${k.join("&")}`,b};class RequestTask extends interruptibletask_1.InterruptibleTask{constructor(a){super(a),this._alreadyRefresh=!1,this._promise.catch((a)=>{log.error(`${this._opt.url} ${a}`)})}abort(){this._aborted||(this._aborted=!0,this._realRequest&&"function"==typeof this._realRequest.abort&&this._realRequest.abort())}async request(){if(this._aborted)throw interruptibletask_1.AbortEvent;const a=await formateQuery(this._opt);return new Promise((b,c)=>{this._realRequest=request(a,(a,d,e)=>{return a?void c(a):void b({resp:d,body:e})}),this._realRequest.on("abort",()=>{c(interruptibletask_1.AbortEvent)})})}checkStatusCode(a){if(-1!==this._opt.needCheckStatusCode){const b=a.resp.statusCode;if(200!==b&&206!==b)throw locales.config.NETWORK_ERROR.format(b)}}async checkErrorCode(a){const{needParse:b,needCheckErrCode:c,needToken:d,forceLogin:e}=this._opt;if(-1===b)return a;if(a.body=JSON.parse(a.body),-1===c)return a;const f=a.body.baseresponse||{},g=f.errcode;if(void 0===g||0===g)return a;if(1===d&&-1!==e&&(isNeedRelogin(g),g===INVALID_LOGIN)){if(!this._alreadyRefresh)return await loginManager.requestRefreshTicket(),this._alreadyRefresh=!0,await this.run(this._opt);store.dispatch(userActions.loginExpired())}const h=tools.parseCgiErrorCode(g,f.errmsg),i=new Error(h);throw i.errcode=g,i}async run(a){this._opt=Object.assign({},a);let b=await this.request();return await this.checkStatusCode(b),b=await this.checkErrorCode(b),b}}const sendRequest=function(a){const b=new RequestTask(a);return b};module.exports=sendRequest;
;}(require("lazyload"), require);
