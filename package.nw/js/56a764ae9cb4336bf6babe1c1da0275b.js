;!function(require, directRequire){;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const utils_1=require('./46d7303eb986fa402d60bf5e929aa077.js'),config_1=require('./a148d3a11fd5268109e21fb40c9d527b.js'),fs=require("fs"),path=require("path"),mkdir=require("mkdir-p"),MAX_LOG_NUM=20,noop=()=>{};class Logger{constructor(a){this.identifier="[not provided]",this.counters={log:utils_1.dateStamp(),warn:utils_1.dateStamp(),error:utils_1.dateStamp(),assertion:utils_1.dateStamp()},this.timers={},this.caches={},this.warnCounter=0,this.errorCounter=0,this.assertionCounter=0,this.logFolder=a.logFolder,this.logFileForWarnings=a.logFileForWarnings,this.logFileForErrors=a.logFileForErrors,this.logFileForAssertions=a.logFileForAssertions,mkdir.sync(this.logFolder),this.init.call(this)}init(){const a=this.getProperty("logFolder"),b=fs.readdirSync(a),c={log:[],warn:[],error:[],assertion:[]};for(const d of b){const b=path.join(a,d),e=fs.statSync(b);d.startsWith("log.")?c.log.push({filePath:b,createTime:parseInt(e.birthtime.getTime()/1e3+"",10)}):d.startsWith("warn.")?c.warn.push({filePath:b,createTime:parseInt(e.birthtime.getTime()/1e3+"",10)}):d.startsWith("error.")?c.error.push({filePath:b,createTime:parseInt(e.birthtime.getTime()/1e3+"",10)}):d.startsWith("assertion.")&&c.assertion.push({filePath:b,createTime:parseInt(e.birthtime.getTime()/1e3+"",10)})}const d=this.getProperty("counters");for(const a in c){if(!c.hasOwnProperty(a))continue;const b=c[a];if(b.sort((c,a)=>{return c.createTime<a.createTime?1:-1}),b.length>=MAX_LOG_NUM)for(let a=MAX_LOG_NUM;a<b.length;a++){const c=b[a];try{fs.unlinkSync(c.filePath)}catch(a){}}d[a]=utils_1.dateStamp(new Date,!0)}}get i(){return utils_1.isDev?console.log.bind(console,utils_1.timeStamp(),this.identifier):noop}get i_(){return console.log.bind(console,utils_1.timeStamp(),this.identifier)}get w(){return this.logFileForWarnings?(...a)=>{this.logWarn.call(this,...a),console.warn(utils_1.timeStamp(),this.identifier,...a)}:console.warn.bind(console,utils_1.timeStamp(),this.identifier)}get w_(){return console.warn.bind(console,utils_1.timeStamp(),this.identifier)}get e_(){return console.error.bind(console,utils_1.timeStamp(),this.identifier)}get e(){return this.logFileForErrors?(...a)=>{this.logError.call(this,...a),console.error(utils_1.timeStamp(),this.identifier,...a)}:console.error.bind(console,utils_1.timeStamp(),this.identifier)}get assert(){return this.logFileForAssertions?(...a)=>{this.logAssertion.call(this,...a),console.error(utils_1.timeStamp(),this.identifier,...a)}:console.error.bind(console,utils_1.timeStamp(),this.identifier,"[ASSERTION]")}get assert_(){return console.error.bind(console,utils_1.timeStamp(),this.identifier,"[ASSERTION]")}get f(){return this.logLog.bind(this)}get f_(){return noop}logLog(...a){this.logToFile.call(this,"log",`${this.identifier} ${utils_1.timeStamp()} :: ${a.join(" ")}`)}logWarn(...a){this.logToFile.call(this,"warn",`${this.identifier} ${utils_1.timeStamp()} :: ${a.join(" ")}`)}logError(...a){this.logToFile.call(this,"error",`${this.identifier} ${utils_1.timeStamp()} :: ${a.join(" ")}`)}logAssertion(...a){this.logToFile.call(this,"assertion",`${this.identifier} ${utils_1.timeStamp()} :: ${a.join(" ")}`)}logToFile(a,b){const c=this.getProperty("caches");c[a]=(c[a]||"")+"\n"+b;const d=this.getProperty("timers");d[a]||(d[a]=setTimeout(()=>{d[a]=void 0;const b=this.getProperty("counters"),e=this.getProperty("logFolder"),f=path.join(e,`${a}.${b[a]||0}.txt`);let g="";try{g=fs.readFileSync(f,"utf-8")}catch(a){g=""}g+=c[a],c[a]="";try{fs.writeFileSync(f,g,"utf-8"),g.length>512000&&(b[a]+=".1")}catch(a){}},5e3))}setProperty(a,b){this[a]=b}getProperty(a){return this[a]}}const instance=new Logger({identifier:"[not provided]",logFolder:config_1.RemoteLogDir,logFileForWarnings:!0,logFileForErrors:!0,logFileForAssertions:!0}),getProperty=instance.getProperty.bind(instance),setProperty=instance.setProperty.bind(instance);function logger(a){const b={identifier:a,setProperty,getProperty};return Object.setPrototypeOf(b,instance),b}exports.default=logger;
;}(require("lazyload"), require);
