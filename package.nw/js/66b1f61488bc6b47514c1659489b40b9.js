;!function(require, directRequire){;'use strict';const actions=require('./0634ee2ebd3e560d9d4804ecc960160f.js'),{LOGIN_STATUS}=require('./56c390e04c10e91a4aa2a2c19d9a885d.js'),loginManager=require('./89ba85d67a88f7636d657c22b5d3e038.js'),{REHYDRATE}=require('redux-persist/constants'),_=require('lodash');function getInitialState(){const a=loginManager.getUserInfo();return Object.assign({},a,{loginStatus:a.signatureExpiredTime>Date.now()?LOGIN_STATUS.SUCCESS:LOGIN_STATUS.EXPIRED,accountMap:{}})}module.exports=function(a=getInitialState(),b={}){switch(b.type){case actions.USER_LOGIN_SUCCESS:return Object.assign({},a,b.userInfo,{loginStatus:LOGIN_STATUS.SUCCESS});case actions.USER_LOGIN_REQUEST:return Object.assign({},a,{loginStatus:LOGIN_STATUS.REQUEST});case actions.USER_LOGIN_PENDING:return Object.assign({},a,{loginStatus:LOGIN_STATUS.PENDING});case actions.LOGIN_AND_GOTO:return Object.assign({},a,b.user,{loginStatus:LOGIN_STATUS.SUCCESS});case actions.USER_LOGIN_FAIL:return{accountMap:a.accountMap,loginStatus:LOGIN_STATUS.FAIL,syncTime:a.syncTime};case actions.USER_LOGIN_CANCAL:return{accountMap:a.accountMap,loginStatus:LOGIN_STATUS.CANCEL,syncTime:a.syncTime};case actions.USER_LOGIN_EXPIRED:return{accountMap:a.accountMap,loginStatus:LOGIN_STATUS.EXPIRED,syncTime:a.syncTime};case actions.USER_UPDATE_INFO:return Object.assign({},a,b.userInfo);case actions.USER_SYNC_STORE:return Object.assign({},b.data,{syncTime:b.syncTime});case actions.USER_ADD_ACCOUNT:return Object.assign({},a,{accountMap:Object.assign({},a.accountMap,{[b.data.openid]:Object.assign({},b.data.userInfo)})});case actions.USER_REMOVE_ACCOUNT:{const c=Object.assign({},a.accountMap);return b.data.openids.forEach((a)=>{delete c[a]}),Object.assign({},a,{accountMap:c})}case actions.USER_UPDATE_ACCOUNT_STATUS:{const c=a.accountMap[b.data.openid];return c?Object.assign({},a,{accountMap:Object.assign({},a.accountMap,{[b.data.openid]:Object.assign({},c,{loginStatus:b.data.status})})}):a}case actions.USER_UPDATE_ACCOUNT:return Object.assign({},a,{accountMap:Object.assign({},a.accountMap,{[b.data.openid]:Object.assign({},b.data.userInfo)})});case REHYDRATE:{const c=b.payload.user||{},d=_.merge(_.cloneDeep(a.accountMap),c.accountMap||{});for(const a in d){const b=d[a];b.signatureExpiredTime>Date.now()&&(b.loginStatus=b.signatureExpiredTime>Date.now()?LOGIN_STATUS.SUCCESS:LOGIN_STATUS.EXPIRED)}return Object.assign({},a,{accountMap:d})}default:return a;}};
;}(require("lazyload"), require);
