;!function(require, directRequire){;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const tslib_1=require("tslib"),messager_1=require('./02a96d04e49a39ea9d70e3d9d372379a.js'),localmessager_1=require('./739d4ea3b9eb05a989e27e4786abec1a.js'),eventemitter3_1=require("eventemitter3"),config_1=require('./a148d3a11fd5268109e21fb40c9d527b.js'),utils_1=require('./46d7303eb986fa402d60bf5e929aa077.js'),log_1=require('./56a764ae9cb4336bf6babe1c1da0275b.js'),server_1=require('./ce02bd5f4368747c4e2fff84ed0fc0de.js'),adb=require('./dd320c6b45ca97d2e34cfcab75e86aca.js'),path=require("path"),fs=require("fs"),reporter_1=require('./c0fcfafba1db9bc540a87c2e027c9aa9.js'),vendor=require('./6c0b5b7853d43fa4652c05111ca481a7.js'),cdp_1=require('./50511dfc9594665ce5e4cf904d385402.js');let ipcParent=null;try{const a=require(utils_1.isMac?"node-sync-ipc":"node-sync-ipc-nwjs");ipcParent=a.parent()}catch(a){ipcParent=null}const idepluginMessager=require('./e9e3fd38aeedddd6db73d1d015ff6952.js'),remoteDebugMessager=idepluginMessager.get("storage_remotedebug"),wxmlRemoteDebugMessager=idepluginMessager.get("wxml_remotedebug"),appDataRemoteDebugMessager=idepluginMessager.get("appdata_remotedebug"),remoteDebugDevtoolsMessager=require('./66edba052030dfad3a8ba4f689be46c8.js'),devVendorList=require('./ebfcad0a5e72b6e693634486564b1394.js').devVendorList,{getAvailablePort}=require('./84b183688a46c9e2626d3e6f83365e13.js'),NODE_PATH=(()=>{let a=path.join(path.dirname(process.execPath),"node");return"darwin"!==process.platform&&(a+=".exe"),a})(),VM_FILE_PATH=utils_1.isDev?path.join(__dirname,"../../../libs/remote-helper.js"):path.join(__dirname,"./libs/remote-helper.js"),VENDOR_DIR=utils_1.isDev?path.join(__dirname,"../../../vendor"):path.join(__dirname,"vendor"),log=log_1.default("[remotedebug]"),cpLog=log_1.default("[cp]"),logInvoke=utils_1.logInvoke(log),logStack=utils_1.logStack(log),notFound=Symbol("storageNotFound"),getInitialInspectPort=(()=>{let a;return async function(b=!1){return!b&&a?Promise.resolve(a):(a=await getAvailablePort(),Promise.resolve(a))}})(),getDebugServerPort=(()=>{let a;return async function(b=!1){return!b&&a?Promise.resolve(a):(a=await getAvailablePort(),Promise.resolve(a))}})(),getCdpPort=(()=>{let a;return async function(b=!1){return!b&&a?Promise.resolve(a):(a=await getAvailablePort(),Promise.resolve(a))}})(),networkIdPrefixMap={request:1,download:2,upload:3,socket:4,1:"request",2:"download",3:"upload",4:"socket"};class RemoteDebug extends eventemitter3_1.EventEmitter{constructor(a){super(),this.deviceInfo=void 0,this.debugServer=null,this.clientNetworkType=void 0,this.clientNetworkSpeed=void 0,this.clientNetworkInterval=0,this.currentSyncSdkName=void 0,this.currentSyncSdkCallId=void 0,this.currentSyncSdkResolver=null,this.messager=null,this.cpReady=!1,this.debugMessageQueued=!1,this.destroyed=!1,this.usingLocalStorage=!1,this.clientProxyPort=void 0,this.debuggerStatus=0,this.debuggerStatusChangeTimeout=void 0,this.cpQueue=[],this.msQueue=[],this.cp=null,this.lastEvalTime=void 0,this.delayedQueue=[],this._askForRetryFn=()=>Promise.resolve(!1),this.autoPingTimeout=void 0,this.autoSaveStorageTimeout=void 0,this.lastPongResponse=void 0,this._storageCache=null,this._onRemoteDebugMessage=void 0,this._onWxmlRemoteDebugMessage=void 0,this._onAppDataRemoteDebugMessage=void 0,this._onRemoteDebugDevtoolsMessage=void 0,this.webviewInfos=null,this.networkDebugMaps={request:{},download:{},upload:{},socket:{}},this.clientSupportCompressAlgo=[],this.cpExchangeResolvers={},this.jsContextIdNames={},this.currentJsContextId="",this.cdpEnabled=!!a.cdpEnabled,this.files=a.files,this.dir=a.dir,this.dataDir=a.dataDir,this.tempDir=a.tempDir,this.initialRoomInfo=Object.assign({},a.initialRoomInfo),this.mode=a.mode||"server",this.usingLocalStorage=!!(a.config||{}).usingLocalStorage,this.clientProxyPort=a.clientProxyPort}onAskForRetry(a){this._askForRetryFn=a,this.messager&&this.messager.onAskForRetry(a)}onAskForChoosingAndroidDevice(a){this._askForChoosingAndroidDevice=a}onAskForAndroidAuthorize(a){this._askForAndroidAuthorize=a}onOpenEditorFile(a){this._openEditorFileFn=a}changeDebuggerStatus(a){this.debuggerStatus=a,this.debuggerStatusChangeTimeout||(this.debuggerStatusChangeTimeout=setTimeout(()=>{this.debuggerStatusChangeTimeout=void 0,this.onDebuggerStatusChange()},500))}async init(){if(global.rd=this,!ipcParent)throw log.e("node-sync-ipc is broken"),new Error("node-sync-ipc is broken.");this.messager&&(this.messager.removeAllListeners(),this.messager.destroy());let a;if("android"===this.mode){let b,c=null;try{const d=async()=>{if(!(c&&"device"===c.type.toLowerCase())){const a=await adb.listDevices();if(1<a.length){if(log.i("found a lot of android devices",a),c&&0<=a.findIndex((a)=>a.id===c.id)){const d=a.findIndex((a)=>a.id===c.id);b=d}else if(this._askForChoosingAndroidDevice){const c=await this._askForChoosingAndroidDevice(a);if("number"==typeof c)b=c;else throw new Error("unrecognized index "+c)}else throw new Error("choose android function not set");}else if(1>a.length)throw log.i("no android devices found"),new Error("no android devices found");else b=0;if(c=a[b],"device"!==c.type.toLowerCase()){if(this._askForAndroidAuthorize){const a=await this._askForAndroidAuthorize(c);if(!a)throw new Error("user reject authorize")}else throw new Error("android authorize function not set");await d()}}};if(await d(),c)a=c.id;else throw new Error("no valid android device")}catch(a){throw a}}const b=await getDebugServerPort(!0);this.debugServer=new server_1.DebugServer({port:b,mode:this.mode,androidDeviceId:a,clientProxyPort:this.clientProxyPort}),this.messager="server"===this.mode?new messager_1.Messager({tempDir:this.tempDir,initialRoomInfo:this.initialRoomInfo}):new localmessager_1.LocalMessager({roomInfo:this.initialRoomInfo,debugServerPort:b,debugServer:this.debugServer}),this.debugServer.on("cpmessage",this.onCpWsMessage.bind(this)),this.messager.on("statuschange",this.onMessagerStatusChange.bind(this)),this.messager.on("debugmessage",this.onDebugMessage.bind(this)),this.messager.onAskForRetry(this._askForRetryFn),this.messager.on("accident",this.onMessagerAccident.bind(this)),this.messager.on("event",this.onMessagerEvent.bind(this)),this.messager.on("datasendreport",this.onMessagerDataSendReport.bind(this));try{await this.messager.init(),await this.debugServer.init()}catch(a){throw log.e(a),a}const c=this.destroy.bind(this);if(this.messager.on("destroy",this.onMessagerDestroy.bind(this)),this.cdpEnabled)return void this.onCpMessage({type:"vmReady",data:{inspectUrl:""}});const d={wsurl:`ws://127.0.0.1:${b}`,httpPort:(global.proxyPort||9973)+"",initialInspectPort:(await getInitialInspectPort(!0))+"",dir:this.dir,tempDir:this.tempDir,dataDir:this.dataDir,usingLocalStorage:this.usingLocalStorage?"yes":"no",isDev:utils_1.isDev?"yes":"no",files:JSON.stringify(this.files),vendorDir:VENDOR_DIR},e=this.cp=ipcParent.fork(VM_FILE_PATH,[],{execPath:NODE_PATH,env:d});e.stdout&&e.stdout.setEncoding("utf8"),e.on("message",this.onCpMessage.bind(this)),e.onSync("sdksyncapi",this.onCpSyncMessage.bind(this)),e.onSync("sdkstorageapi",this.onCpStorageMessage.bind(this)),this.messager.on("destroy",this.onMessagerDestroy.bind(this)),e.on("disconnect",c),e.on("close",c),e.on("exit",(a)=>{log.w("cp exited with code "+a),c("child process exit "+a)}),e.on("error",(a)=>{log.e("cp encountered error",a&&a.toString()),c(a&&a.toString())})}onDebuggerStatusChange(){const a={is_hit:this.debuggerStatus};this.sendMessageToClient(a,config_1.DebugMessageCategory.Breakpoint),this.emit("statuschange")}onMessagerStatusChange(a){if(a<=messager_1.ConnectionStatus.Dead){this.currentSyncSdkResolver&&this.currentSyncSdkResolver("debug session end");this.sendMessageToCp({type:"debugEnable",data:{enabled:!1}})}else if(0<this.msQueue.length){const a=[...this.msQueue];this.msQueue=[];for(const b of a)this.sendMessageToClient(b.message,b.category,b.extra)}a>=messager_1.ConnectionStatus.ServerBlocked&&!this.autoPingTimeout?this.enableAutoPing():a<messager_1.ConnectionStatus.ServerBlocked&&this.autoPingTimeout&&(clearTimeout(this.autoPingTimeout),this.lastPongResponse=void 0),this.emit("statuschange")}onMessagerDataSendReport(a){reporter_1.reportData(this.initialRoomInfo.appid,reporter_1.ReportType.DataSend,a)}onMessagerAccident(){this.emit("statuschange")}onMessagerEvent(a){this.emit("event",a)}onMessagerDestroy(){}onCpWsMessage(a){if("string"==typeof a)try{const b=JSON.parse(a);this.onCpMessage(b)}catch(b){log.e("error parsing cp ws message",a)}else if(a&&a.data)try{const b=JSON.parse(a.data);this.onCpMessage(b)}catch(b){log.e("error parsing cp ws message",a.data)}else log.w("invalid cp ws message",a)}async onCpMessage(a){if("sendMessageToClient"===a.type)return void this.sendMessageToClient(a.data.debugObject,a.data.category,a.data.extra);if("vmReady"===a.type){if(this.cpReady)return void log.w("received vm ready while cp ready");const b=a.data.inspectUrl.replace(/^ws\:\/\//i,""),c=await getCdpPort();this.cdpEnabled&&(this.cdp=new cdp_1.default({port:c}),this.cdp.on("chromemessage",this.onCDPChromeMessage.bind(this)),await this.cdp.init());const d=this.cdpEnabled?`127.0.0.1:${c}`:b,e=this.cdpEnabled?`chrome-devtools://devtools/bundled/inspector.html?v8only=true&experiments=true&ws=${d}`:`chrome-devtools://devtools/bundled/inspector.html?experiments=true&ws=${d}`;this.cpReady=!0,this.processCpQueue(),setTimeout(()=>this.emit("initsuccess",{url:e}),0),remoteDebugMessager.register(this._onRemoteDebugMessage=this.onRemoteDebugMessage.bind(this)),wxmlRemoteDebugMessager.register(this._onWxmlRemoteDebugMessage=this.onWxmlRemoteDebugMessage.bind(this)),appDataRemoteDebugMessager.register(this._onAppDataRemoteDebugMessage=this.onAppDataRemoteDebugMessage.bind(this)),remoteDebugDevtoolsMessager.register(this._onRemoteDebugDevtoolsMessage=this.onRemoteDebugDevtoolsMessage.bind(this)),remoteDebugDevtoolsMessager.ready=!0}else"error"===a.type?cpLog.e(a.data.error):"wxpagesinfo"===a.type?this.onWxPageRoute(a.data):"wxappdatas"===a.type?this.onWXAppDatas(a.data):"sdkapireport"===a.type?this.onSdkApiReport(a.data):"networkdebug"===a.type?this.onNetworkDebug(a.data,a.timestamp):"exchange"===a.type?this.onCpExchangeResult(a.id,a.result):log.w("invalid cp message type",a)}onCDPChromeMessage(a){const b={op_id:Math.round(100*Math.random()),payload:a,jscontext_id:this.currentJsContextId};this.sendMessageToClient(b,config_1.DebugMessageCategory.ChromeDevtools,{len:a.length})}onClientCDPResult(a){a.jscontext_id!==this.currentJsContextId&&(log.w("incoming cdp context id",a.jscontext_id,"dost not match",this.currentJsContextId),a.jscontext_id="");const b=a.payload;this.cdp&&this.cdp.sendMessageToChromeInstance(b)}onCpExchangeResult(a,b){const c=this.cpExchangeResolvers[a];c&&c.resolve&&c.resolve.call(this,b),delete this.cpExchangeResolvers[a]}cpExchange(a,b,c){return new Promise((d,e)=>{const f=utils_1.randomString();c?d():this.cpExchangeResolvers[f]={resolve:d,reject:e},this.sendMessageToCp({type:"exchange",id:f,command:a,data:b})})}async onRemoteDebugDevtoolsMessage(a){const{command:b,data:c}=a;if("Network.getResponseBody"===b){const a=c.params||{},b=(a.requestId||"").split("."),d=b[0],e=b[1],f=networkIdPrefixMap[d];if(f){let a=await this.cpExchange("getNetworkResponseBody",{id:e,api:f});a=a||"",remoteDebugDevtoolsMessager.send({command:"DISPATCH_MESSAGE",data:{id:c.id,result:{body:a,base64Encoded:!1}}})}}else"RESET_NETWORK_CACHE"===b&&this.cpExchange("resetNetworkCache",void 0,!0)}onNetworkDebug(a,b){const c=networkIdPrefixMap[a.api],d=`${c}.${a.id}`,e=a.state,f=a.api,g=this.networkDebugMaps[f];if(!g[d])return void log.w("no record for",a.id,"on network debug");if("headersReceived"===e){if(g[d]=Object.assign({},g[d]||{},{state:a.state,responseHeaders:a.responseHeaders,responseReceivedTimestamp:b||Date.now()}),"open"===a.websocketState){const a={method:"Network.responseReceived",params:{requestId:d,timestamp:(g[d].responseReceivedTimestamp||Date.now())/1e3,type:"XHR",response:{url:g[d].url,status:g[d].statusCode||101,statusText:g[d].statusText||"Switching Protocols",headers:g[d].responseHeaders,connectionId:d,timing:{requestTime:(b||Date.now())/1e3,proxyStart:-1,proxyEnd:-1,dnsStart:-1,dnsEnd:-1,connectStart:-1,connectEnd:-1,sslStart:-1,sslEnd:-1,workerStart:-1,workerReady:-1,sendStart:-1,sendEnd:-1,pushStart:0,pushEnd:0,receiveHeadersEnd:(g[d].responseReceivedTimestamp||0)-(b||Date.now())||-1},protocol:"HTTP/1.1"}}};remoteDebugDevtoolsMessager.send({command:"DISPATCH_MESSAGE",data:a})}}else if("dataReceived"===e){const c=g[d].datasReceived||[],e={dataLength:a.dataLength,timestamp:b||Date.now()};c.push(e),g[d]=Object.assign({},g[d]||{},{state:a.state,datasReceived:c,dataLength:a.dataLength});const f={method:"Network.dataReceived",params:{requestId:d,timestamp:e.timestamp/1e3,dataLength:a.dataLength,encodedDataLength:a.dataLength}};remoteDebugDevtoolsMessager.send({command:"DISPATCH_MESSAGE",data:f})}else if("dataSent"===e){const c=g[d].datasSent||[],e={dataLength:a.dataLength,timestamp:b||Date.now()};c.push(e),g[d]=Object.assign({},g[d]||{},{state:a.state,datasSent:c,dataSentLength:a.dataLength})}else if("success"===e){g[d]=Object.assign({},g[d]||{},{state:a.state,statusCode:a.statusCode,statusText:a.statusText,finishedTimestamp:b||Date.now(),dataLength:a.dataLength||g[d].dataLength});const c=g[d].datasSent||[];let e=-1,f=-1;0<c.length&&(e=0,f=(g[d].requestTimestamp||0)-(c[c.length-1].timestamp||0));const h={method:"Network.responseReceived",params:{requestId:d,timestamp:(g[d].responseReceivedTimestamp||Date.now())/1e3,type:"XHR",response:{url:g[d].url,status:g[d].statusCode,statusText:g[d].statusText||"",headers:g[d].responseHeaders,connectionId:d,timing:{requestTime:(g[d].requestTimestamp||Date.now())/1e3,proxyStart:-1,proxyEnd:-1,dnsStart:-1,dnsEnd:-1,connectStart:-1,connectEnd:-1,sslStart:-1,sslEnd:-1,workerStart:-1,workerReady:-1,sendStart:e,sendEnd:f,pushStart:0,pushEnd:0,receiveHeadersEnd:(g[d].responseReceivedTimestamp||0)-(b||Date.now())||-1},protocol:"HTTP/1.1"}}},i={method:"Network.loadingFinished",params:{requestId:d,timestamp:(g[d].finishedTimestamp||Date.now())/1e3,dataLength:g[d].dataLength,encodedDataLength:g[d].dataLength}};"close"!==a.websocketState&&remoteDebugDevtoolsMessager.send({command:"DISPATCH_MESSAGE",data:h}),remoteDebugDevtoolsMessager.send({command:"DISPATCH_MESSAGE",data:i})}else"fail"===e&&(g[d]=Object.assign({},g[d]||{},{state:a.state,finishedTimestamp:b||Date.now()}),remoteDebugDevtoolsMessager.send({command:"DISPATCH_MESSAGE",data:{method:"Network.loadingFailed",params:{requestId:d,timestamp:(g[d].finishedTimestamp||Date.now())/1e3,type:"XHR",errorText:"request failed",canceled:!1}}}))}processCpQueue(){const a=[...this.cpQueue];this.cpQueue=[];for(const b of a)this.sendMessageToCp(b)}onSdkApiReport(a){reporter_1.reportData(this.initialRoomInfo.appid,reporter_1.ReportType.SDKAPI,a)}onWxPageRoute(a={}){this.webviewInfos={currentWebviewId:a.currentWebviewId||0,webviewIds:a.webviewIds||[]};const b=(this.webviewInfos||{}).webviewIds||[],c={};for(const d in b){const a=this.webviewInfos.webviewIds[d];c[a]={targetId:a}}wxmlRemoteDebugMessager.ready=!0,wxmlRemoteDebugMessager.triggerOnEvent("CHANGE_DEBUGGEE",{debuggee:{targetId:((this.webviewInfos||{}).currentWebviewId||0)+""},debuggeeMap:c,device:{width:(this.deviceInfo||{}).screenWidth||320,dpr:(this.deviceInfo||{}).pixelRatio||2}})}onWxmlRemoteDebugMessage(a){if(!a||!a.command)return void log.w("invalid wxmlRemoteDebugMessager message");const{data:b,command:c}=a,d=a;if("GET_CURRENT_DEBUGGEE"===c){wxmlRemoteDebugMessager.ready=!0;const a={},b=(this.webviewInfos||{}).webviewIds||[];for(const c in b){const d=b[c];a[d]={targetId:d}}wxmlRemoteDebugMessager.triggerOnEvent("CHANGE_DEBUGGEE",{debuggee:{targetId:((this.webviewInfos||{}).currentWebviewId||0)+""},debuggeeMap:a,device:{width:(this.deviceInfo||{}).screenWidth||320,dpr:(this.deviceInfo||{}).pixelRatio||2}})}else if("SEND_COMMAND"===c){const a={method:b.method,commandParams:b.commandParams,callbackID:b.callbackID||d.callbackID},c=utils_1.tryCatch(()=>utils_1.jsonStringify(a));if(utils_1.invalidTryCatchResult(c))return void log.e("invalid SEND_COMMAND params",a);const e={params:c,webview_id:(this.webviewInfos||{}).currentWebviewId||0};this.sendMessageToClient(e,config_1.DebugMessageCategory.DomOp,{len:c.length})}else if("OPEN_FILE"===c)"function"==typeof this._openEditorFileFn&&this._openEditorFileFn(b),log.i("opening file",b);else if("ON_PANEL_HIDE"===c)log.i("wxml panel hide");else if("ON_PANEL_SHOW"===c)log.i("wxml panel show");else if("HIDE_INSPECT_MODE"===c){const a={method:"DOM.hideHighlight",commandParams:{}},b=utils_1.tryCatch(()=>utils_1.jsonStringify(a));if(utils_1.invalidTryCatchResult(b))return void log.e("invalid SEND_COMMAND params",a);const c={params:b,webview_id:(this.webviewInfos||{}).currentWebviewId||0};this.sendMessageToClient(c,config_1.DebugMessageCategory.DomOp,{len:b.length})}else log.w("unrecognized wxml command",c,b)}setInspectMode(a){const b=utils_1.tryCatch(()=>utils_1.jsonStringify({method:"Overlay.setInspectMode",commandParams:{mode:a}}));if(utils_1.invalidTryCatchResult(b))return void log.w("invalid params str");const c={webview_id:(this.webviewInfos||{}).currentWebviewId||0,params:b};this.sendMessageToClient(c,config_1.DebugMessageCategory.DomOp,{len:b.length})}onRemoteDebugMessage(a){if(!a||!a.command)return void log.w("invalid remoteDebugMessager message");const{command:b,data:c}=a;return"STORAGE_PANNEL_SHOW"===b?(remoteDebugMessager.ready=!0,void this.notifyStorageUpdate()):"STORAGE_PANNEL_HIDE"===b?void(remoteDebugMessager.ready=!1):"EXEC_STORAGE_SDK"===b?void(c?this.sdkStorageOperate(c.api,c.args):log.e("invalid remoteDebugMessager storage operation")):void utils_1.expectFail.fail(()=>{log.e("invalid remoteDebugMessager command",b)})}onAppDataRemoteDebugMessage(a){if(!a||!a.command)return void log.w("invalid AppDataRemoteDebugMessager message");const{command:b,data:c}=a;appDataRemoteDebugMessager.ready=!0,"GET_APP_DATA"===b?this.getAppDatas():"WRITE_APP_DATA"===b?this.setAppDatas(c):log.w("invalid AppDataRemoteDebugMessager command",b)}getAppDatas(){this.sendMessageToCp({type:"getWXAppDatas"})}setAppDatas(a){this.sendMessageToCp({type:"setWXAppDatas",data:a})}onWXAppDatas(a){appDataRemoteDebugMessager.triggerOnEvent("SEND_APP_DATA",a)}notifyStorageUpdate(){if(remoteDebugMessager&&remoteDebugMessager.ready){const a=this.storage,b={};[0,1].forEach((c)=>{const d=a[c]||{},e=Object.keys(d),f={};for(const a of e)try{const b=this.sdkStorageOperate("getStorageSync",{key:a,storageId:c});b&&(delete b.errMsg,f[a]=b)}catch(b){log.e("error notify storage update",a)}b[c]=f}),remoteDebugMessager.triggerOnEvent("UPDATE_STORAGE",b)}}get storage(){if(!this._storageCache){const a=path.join(this.dataDir,"storage.json");try{const b=fs.readFileSync(a,"utf-8");this._storageCache=JSON.parse(b)}catch(b){log.e("error loading storage cache from",a),this._storageCache={}}}return this._storageCache}autoSaveStorage(){this.autoSaveStorageTimeout||(this.autoSaveStorageTimeout=setTimeout(()=>{this.autoSaveStorageTimeout=void 0;const a=path.join(this.dataDir,"storage.json"),b=this.storage;try{const c=JSON.stringify(b);fs.writeFileSync(a,c,"utf-8")}catch(b){log.e("saving storage file",a,"failed")}this.notifyStorageUpdate()},0))}storageOperate(a,b,c,d){const e=this.storage;let f=(a||{}).storageId;if(void 0===f)f=0;else if(0!==f&&1!==f)throw new Error("nonexistent storage space");if(!e)throw new Error("storage invalid");const g=e[f]||{};if(e[f]=g,"get"===b){if(!g.hasOwnProperty(c))return notFound;const a=g[c];return JSON.parse(a)}if("set"===b)g[c]=JSON.stringify(d),this.autoSaveStorage();else if("remove"===b)delete g[c],this.autoSaveStorage();else if("clear"===b){for(const a in g)delete g[a];this.autoSaveStorage()}else{const a={keys:Object.keys(g),limitSize:10240};let b=0;for(const a in g)b+=g[a].length;return b=Math.ceil(b/1024),a.currentSize=b,a}}sdkStorageOperate(a,b){let c;if("getStorage"===a||"getStorageSync"===a){const d=b,e=d.key;let f=this.storageOperate(d,"get",e);if(f===notFound)c={errMsg:`${a}:fail data not found`};else{const b=Object.prototype.toString.call(f).slice(8,-1);"string"!==b.toLowerCase()&&(f=JSON.stringify(f)),c={errMsg:`${a}:ok`,data:f,dataType:b}}}else if("setStorage"===a||"setStorageSync"===a){const d=b,e=d.key;let f=d.data;const g=d.dataType;"string"!==g.toLowerCase()&&(f=JSON.parse(f)),this.storageOperate(d,"set",e,f),c={errMsg:`${a}:ok`}}else if("removeStorage"===a||"removeStorageSync"===a){const d=b,e=d.key;this.storageOperate(d,"remove",e),c={errMsg:`${a}:ok`}}else if("clearStorage"===a||"clearStorageSync"===a){this.storageOperate(b,"clear"),c={errMsg:`${a}:ok`}}else if("getStorageInfo"===a||"getStorageInfoSync"===a){c=Object.assign({},this.storageOperate(b,"info")||{},{errMsg:`${a}:ok`})}else c=void 0;return c}onCpStorageMessage(a,b){if(utils_1.expect(this.usingLocalStorage,log).toFuzzyEqual(!0).fail(()=>{log.e("operating local storage while using local storage is false")}),!b||!b.data||!b.data.debugObject){return void a({error:"debug message broken"})}const c=b.data.debugObject||{},d=c.args||[],e=d[0],f=d[1],g=parseInt(d[2],10),h=isNaN(g)?0:g;let i;try{if(i=this.sdkStorageOperate(e,JSON.parse(f)),!i)throw new Error("invalid sdk invoke")}catch(b){return void a({error:b+""})}const j={error:void 0,result:utils_1.jsonStringify(i)};a(j)}onCpSyncMessage(a,b){if(!b||!b.data||!b.data.debugObject){return void a({error:"debug message broken"})}const c=b.data.debugObject,d=b.data.extra;d&&d.sdkName?this.currentSyncSdkName=d.sdkName:(log.w("invalid sync sdk name"),this.currentSyncSdkName="<unknown>"),this.currentSyncSdkCallId=c.call_id;const e=setTimeout(()=>{this.currentSyncSdkResolver&&this.currentSyncSdkResolver("timeout")},15000);this.currentSyncSdkResolver=(b,c)=>{clearTimeout(e),this.currentSyncSdkResolver=null,this.currentSyncSdkName=void 0,this.currentSyncSdkCallId=void 0;const d={error:b?b:void 0,result:c?c.ret:void 0};a(d),this.emit("statuschange")},this.onCpMessage(b),this.emit("statuschange")}sendMessageToClient(a,b,c){if(this.messager){const d=c&&c.len||0,e=256<d?this.clientSupportCompressAlgo[0]||config_1.CompressAlgo.None:config_1.CompressAlgo.None;this.messager.sendDebugMessage(a,b,c,e)}else log.w("messager is not ready sending debug messages"),this.msQueue.push({message:a,category:b,extra:c})}onDebugMessage(a){return a.category===config_1.DebugMessageCategory.Pong?(log.i("got pong response"),void this.handleDebugMessage(a)):void(this.delayedQueue.push(a),2>this.delayedQueue.length&&this.processDelayedQueue())}processDelayedQueue(){const a=Date.now();for(let b=!1;utils_1.expect(Date.now(),log).as((b)=>10000>b-a).fail(()=>{log.e("loop processDelayedQueue running too long"),b=!0}).fail(()=>{this.emit("event",{type:"assertion",kind:"error",message:"processDelayedQueue loop too long"})}),!b;){const a=this.delayedQueue.shift();if(!a)break;const b=parseInt(a.delay+"",10),c=isNaN(b)?0:b;if(!this.lastEvalTime){this.lastEvalTime=Date.now(),this.handleDebugMessage(a);continue}this.lastEvalTime=Date.now(),this.handleDebugMessage(a)}}handleDebugMessage(a){const b=a.data||{};this.lastPongResponse=Date.now();const c=a.category;if(c===config_1.DebugMessageCategory.EvaluateJavascript)return void this.handleEvaluateJavascript(b);if(c===config_1.DebugMessageCategory.CallInterfaceResult)return void this.handleCallInterfaceResult(b);if(c===config_1.DebugMessageCategory.SetupContext)return void this.handleSetupContext(b);if(c===config_1.DebugMessageCategory.Pong){const{ping_id:a,network_type:c}=b;let d;return a&&(d=Date.now()-a,log.i("delta =",d),utils_1.expect(d,log).as((a)=>0<=a).fail(()=>{log.e("something went wrong with ping id",a);this.emit("event",{kind:"warn",type:"assertion",message:"ping id is greater than current date"}),d=0-d})),void this.onClientNetworkChange(c,d)}return c===config_1.DebugMessageCategory.DomEvent?void this.onDomEvent(b):c===config_1.DebugMessageCategory.NetworkDebugAPI?void this.onNetworkDebugAPI(b):c===config_1.DebugMessageCategory.ChromeDevtoolsResult?void this.onClientCDPResult(b):c===config_1.DebugMessageCategory.AddJsContext?void this.onAddJsContext(b):c===config_1.DebugMessageCategory.RemoveJsContext?void this.onRemoveJsContext(b):void log.e("received invalid debug category",c)}useJsContextId(a){if(this.jsContextIdNames[a]){this.currentJsContextId=a;this.sendMessageToClient({jscontext_id:a},config_1.DebugMessageCategory.ConnectJsContext),this.emit("jscontextchange")}else log.w("using non-exists context id",a)}onAddJsContext(a){const b=a.jscontext_id,c=a.jscontext_name||"?";return b?void(this.jsContextIdNames[b]=c,!this.currentJsContextId&&this.useJsContextId(b)):void log.w("invalid jscontext id",b)}onRemoveJsContext(a){const b=a.jscontext_id;"number"==typeof b&&delete this.jsContextIdNames[b]}async onNetworkDebugAPI(a){if(!a||!a.task_id||!a.api_name||!a.request_headers)return void log.w("invalid network debug",a);const b=a.task_id;a.api_name=a.api_name.toLowerCase();const c=networkIdPrefixMap[a.api_name],d=`${c}.${b}`,e=this.networkDebugMaps[a.api_name];e[d]&&log.w(a.api_name,"network debug existing task id",d);const f=utils_1.tryCatch(()=>utils_1.jsonParse(a.request_headers));if(utils_1.invalidTryCatchResult(f))return void log.w("broken request header",a.request_headers);e[d]=Object.assign({},e[d]||{},{requestHeaders:f,requestTimestamp:+(a.timestamp||Date.now()).toString()});let g=await this.cpExchange("getNetworkRequestInfo",{id:b,api:a.api_name});if(g=g||{},e[d].url=g.url,e[d].method=g.method,"object"===utils_1.typeOf(g.data))try{g.data=utils_1.jsonStringify(g.data)}catch(a){log.e(a)}const h={method:"Network.requestWillBeSent",params:{requestId:d,documentURL:f.Referer,request:{url:g.url,method:g.method,postData:g.data,headers:f},timestamp:(e[d].requestTimestamp||Date.now())/1e3,type:"XHR"}};remoteDebugDevtoolsMessager.send({command:"DISPATCH_MESSAGE",data:h})}onDomEvent(a={}){const{params:b,webview_id:c}=a;if(!b||!c)return void log.e("invalid dom event object",a);const d=parseInt(c,10),e=utils_1.tryCatch(()=>utils_1.jsonParse(b));return utils_1.invalidTryCatchResult(e)||isNaN(d)?void log.e("invalid dom event params or webview id",e,d):e&&e.command?void("DEBUGGEE_CALLBACK"===e.command?wxmlRemoteDebugMessager.callback(e.callbackID,e.data):"DEBUGGEE_EVENT"===e.command?wxmlRemoteDebugMessager.triggerOnEvent("ON_EVENT",e.data):wxmlRemoteDebugMessager.triggerOnEvent(e.command,e.data)):void log.e("invalid dom event params",e)}onClientNetworkChange(a,b){"server"===this.mode?"number"==typeof a&&(this.clientNetworkType=a):this.clientNetworkType="ios"===this.mode?config_1.ClientNetWorkType.IOSCable:config_1.ClientNetWorkType.AndroidCable,"number"==typeof b&&(this.clientNetworkSpeed=300>b?config_1.ClientNetWorkSpeed.VeryGood:600>b?config_1.ClientNetWorkSpeed.Good:1e3>b?config_1.ClientNetWorkSpeed.Normal:5e3>b?config_1.ClientNetWorkSpeed.Bad:1e4>b?config_1.ClientNetWorkSpeed.VeryBad:config_1.ClientNetWorkSpeed.Lost,this.clientNetworkInterval=b),this.emit("statuschange")}enableAutoPing(){this.autoPingTimeout&&(log.w("already auto ping timeout"),clearTimeout(this.autoPingTimeout),this.lastPongResponse=void 0);const a=()=>{let b=!1;if("number"==typeof this.lastPongResponse&&10000<Date.now()-this.lastPongResponse&&(b=!0,this.onPingTimeout()),!b){const a={ping_id:Date.now()};this.sendMessageToClient(a,config_1.DebugMessageCategory.Ping,{len:13})}this.autoPingTimeout=setTimeout(a,6000)};this.autoPingTimeout=setTimeout(a,0)}onPingTimeout(){this.onClientNetworkChange(config_1.ClientNetWorkType.Offline,Infinity)}async handleSetupContext(a){a&&a.public_js_md5&&"63b14c17ccc359080cb7df60f31bb5f3"===a.public_js_md5&&(a.public_js_md5="0b62758bc9c05f817162b1104e800161"),a&&a.support_compress_algo&&0!=(a.support_compress_algo&config_1.CompressAlgo.Zlib)&&this.clientSupportCompressAlgo.push(config_1.CompressAlgo.Zlib);const b=a.device_info||{};this.deviceInfo=b,this.debugMessageQueued=!0;const c=this.cpQueue.length;if(b.publib){const a=b.publib,c="WAService.js";try{const{content:b,version:d}=await vendor.getFile(c,a);fs.writeFileSync(path.join(this.tempDir,c),b,"utf-8"),this.deviceInfo.displayPublib=d,this.emit("statuschange")}catch(a){log.e("get publib failed "+a)}}this.debugMessageQueued=!1;this.cpQueue.splice(c,0,{type:"handleSetupContext",data:a}),this.processCpQueue()}async handleCallInterfaceResult(a){const{call_id:b,ret:c}=a;if(this.currentSyncSdkCallId===b&&this.currentSyncSdkResolver)return this.currentSyncSdkResolver(void 0,a),void this.emit("statuschange");this.sendMessageToCp({data:a,type:"handleCallInterfaceResult"})}handleEvaluateJavascript(a){this.sendMessageToCp({data:a,type:"handleEvaluateJavascript"})}sendMessageToCp(a){!this.debugMessageQueued&&this.cpReady&&this.cp&&this.debugServer?this.debugServer.sendMessageToCp(JSON.stringify(a)):(this.cpQueue.push(a),log.w("cp is not ready sending messages",a))}destroy(a){if(this.destroyed)return void log.w("already destroyed");if(this.destroyed=!0,this.cpReady||(log.w("destroy before cp ready"),setTimeout(()=>this.emit("initfail",a))),this.cp){const a=this.cp;setTimeout(()=>{utils_1.tryCatch(()=>a.removeAllListeners()),utils_1.tryCatch(()=>a.kill())},0)}if(this.cp=null,this.cpReady=!1,this.messager){const a=this.messager;a.removeAllListeners(),setTimeout(()=>{a.destroy()},0)}this.messager=null,this.debugServer&&(this.debugServer.removeAllListeners(),this.debugServer.destroy(),this.debugServer=null),"android"===this.mode&&adb.kill().catch((a)=>log.w(a)),this.autoPingTimeout&&clearTimeout(this.autoPingTimeout),this._onRemoteDebugMessage&&remoteDebugMessager.unRegister(this._onRemoteDebugMessage),this._onWxmlRemoteDebugMessage&&wxmlRemoteDebugMessager.unRegister(this._onWxmlRemoteDebugMessage),this._onAppDataRemoteDebugMessage&&appDataRemoteDebugMessager.unRegister(this._onAppDataRemoteDebugMessage),this._onRemoteDebugDevtoolsMessage&&remoteDebugDevtoolsMessager.unRegister(this._onRemoteDebugDevtoolsMessage),this.cdp&&(this.cdp.destroy(),this.cdp=void 0),this.emit("destroy",a)}}tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"changeDebuggerStatus",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"onCDPChromeMessage",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"onClientCDPResult",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"onCpExchangeResult",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"cpExchange",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"onWxmlRemoteDebugMessage",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"setInspectMode",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"onRemoteDebugMessage",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"onAppDataRemoteDebugMessage",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"getAppDatas",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"setAppDatas",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"onWXAppDatas",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"notifyStorageUpdate",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"onCpStorageMessage",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"onCpSyncMessage",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"useJsContextId",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"onAddJsContext",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"onRemoveJsContext",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"onNetworkDebugAPI",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"onDomEvent",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"onClientNetworkChange",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"onPingTimeout",null),tslib_1.__decorate([logInvoke],RemoteDebug.prototype,"handleSetupContext",null),tslib_1.__decorate([logStack],RemoteDebug.prototype,"destroy",null),exports.RemoteDebug=RemoteDebug;
;}(require("lazyload"), require);
