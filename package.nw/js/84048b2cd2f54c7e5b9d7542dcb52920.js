;!function(require, directRequire){;'use strict';const React=require('react'),classnames=require('classnames'),locales=require('./common/locales/index.js'),messageHub=require('./879b9b1b8431c6089f7619a2530cf66d.js'),ProgressRecorder=require('./664c85134de31b9a04ff1f03a1492daf.js'),DEFAULT_STATUS_DURATION=1e3;class WorkbenchStatusBar extends React.Component{constructor(a){super(a),this.handleProgressClick=()=>{0<this.state.progressIndicator.running+this.state.progressIndicator.fail&&this.props.setProgressDialog({show:!this.props.progressDialogShow})},this.progressRecorder=ProgressRecorder.get();const b=[...this.progressRecorder.tasks.values()];this.state={statusDisplay:{id:'',text:'',duration:DEFAULT_STATUS_DURATION},progressIndicator:{running:b.filter((a)=>'pending'===a.status).length,fail:b.filter((a)=>'fail'===a.status).length}},this.blinkObjects={}}componentDidMount(){this._cancalLocaleListener=locales.onChangeLocale(()=>this.forceUpdate()),messageHub.hub.on(messageHub.EVENT.STATUS_DISPLAY,this.onStatusDisplayEvent.bind(this)),this.setupProgressRecorderListeners()}componentWillUnmount(){this._cancalLocaleListener(),this.disposeProgressRecorderListeners()}setupProgressRecorderListeners(){this.onProgressTaskUpdate=()=>{const a=ProgressRecorder.get().tasks;let b=0,c=0;for(const[d,e]of a)e.showInDialog&&('pending'===e.status?b++:'fail'===e.status&&c++);(this.state.running!==b||this.state.fail!==c)&&this.setState({progressIndicator:Object.assign({},this.state.progressIndicator,{running:b,fail:c})})},this.progressRecorder.on(ProgressRecorder.ITaskEvent.change,this.onProgressTaskUpdate)}disposeProgressRecorderListeners(){this.progressRecorder.removeListener(ProgressRecorder.ITaskEvent.change,this.onProgressTaskUpdate)}onStatusDisplayEvent(a){if(a.type)switch(a.type){case'SHOW':{const b=a.duration||DEFAULT_STATUS_DURATION;this.setState({statusDisplay:{id:a.id||'',text:a.text||'',duration:a.duration||DEFAULT_STATUS_DURATION}}),b!==Infinity&&3600000>b&&setTimeout(()=>{this.state.id===a.id&&this.resetStatusDisplay()},b);break}case'HIDE':{this.state.statusDisplay.id===a.id&&this.resetStatusDisplay();break}}}resetStatusDisplay(){this.setState({statusDisplay:{id:'',text:'',duration:DEFAULT_STATUS_DURATION}})}render(){if(global.onlySimulator)return null;const a=0<this.state.progressIndicator.running+this.state.progressIndicator.fail?{}:{display:'none'};return React.createElement('div',{className:'simulator-status-bar',style:{flexDirection:'row'}},React.createElement('div',{className:classnames('ui-flex'),style:{flex:1}},React.createElement('label',{style:{overflow:'hidden',textOverflow:'ellipsis'}},this.state.statusDisplay.text?React.createElement('i',{className:'ui-icon-spinner',style:{width:'1em',height:'1em',transform:'scale(2)'}}):null,'\xA0',this.state.statusDisplay.text)),React.createElement('div',{className:classnames('ui-flex'),style:a,onClick:this.handleProgressClick},React.createElement('label',{style:{overflow:'hidden'}},`${locales.config.RUNNING_TASKS.format(this.state.progressIndicator.running)}${this.state.progressIndicator.fail?` ${locales.config.FAILED_COUNT.format(this.state.progressIndicator.fail)}`:''}`),React.createElement('i',{className:classnames({"ui-icon-arrow-down-circle":this.props.progressDialogShow,"ui-icon-arrow-up-circle":!this.props.progressDialogShow})})))}}module.exports=WorkbenchStatusBar;
;}(require("lazyload"), require);
