;!function(require, directRequire){;"use strict";const interruptibletask_1=require('./f87c21baecac660695b0d3124dbebed6.js'),log=require('./72653d4b93cdd7443296229431a7aa9a.js');class TaskPromise extends interruptibletask_1.InterruptibleTask{constructor(a,b){super(),this._aborted=!1,this._task=a,this._type=b,this.catch((a)=>{log.error(`task type:${this._type} exec error ${a}`)})}run(){return new Promise((a,b)=>{this._resolve=a,this._reject=b})}abort(){this._aborted||(this._aborted=!0,this._instance&&"function"==typeof this._instance.abort&&this._instance.abort(),this._reject(interruptibletask_1.AbortEvent))}async lazyRun(){try{this._instance=this._task();const a=await this._instance;this._resolve(a)}catch(a){this._reject(a)}}}class QueueManager{constructor(){this.queue=[],this.run=(a,b)=>{b&&this.deduplication(b);const c=new TaskPromise(a,b);return this.queue.push(c),this.checkRun(),c},this.checkRun=()=>{process.nextTick(()=>{const a=this.queue.shift();a&&(a.then(this.onTaskEnd,this.onTaskEnd),a.lazyRun())})},this.onTaskEnd=()=>{this.checkRun()}}deduplication(a){if(0>=this.queue.length)return;const b=[];this.queue.forEach((c)=>{c._type===a?c.abort():b.push(c)}),this.queue=b}}const buildQueue=new QueueManager,buildType={compile:"compile",upload:"upload",share:"share",uploadPluginDoc:"uploadPluginDoc"};function enqueueBuildTask(a,b){return buildQueue.run(a,b)}module.exports={buildType,enqueueBuildTask};
;}(require("lazyload"), require);
