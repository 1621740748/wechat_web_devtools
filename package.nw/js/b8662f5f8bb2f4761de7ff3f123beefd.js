;!function(require, directRequire){;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const store=require('./bc78839ccca8df9e5ceeb7fae11b7be2.js'),windowActions=require('./a8c87029da0fa06e986298d447ab0fe2.js'),windowRegistry=require('./db2217eb4cff896bdcbc50abe005058f.js'),tcbApi=require('./3e74bc0c6a5fa450386148788cc0cf44.js'),tcbActions=require('./e298e91f85bae5b5a2b792e6e73a55e3.js'),projectActions=require('./cc2c2970ff81ae4a83123e81ee123da2.js'),log=require('./72653d4b93cdd7443296229431a7aa9a.js'),proxy=require('./437e6043fc662374e4f1c2330516ac40.js'),consoleDisplay=require('./2dfc6a3df6d6fc51266b293c8420e88b.js'),urlConfig=require('./f171257bbcaef547a3cf27266ccb0db2.js'),request=require('./15ba1827c7f6564a45df6bd44da3a977.js'),lodash_1=require("lodash"),fs=require("fs"),path=require("path"),querystring=require("querystring"),uuid_1=require("uuid"),util_1=require("util"),C=require('./56c390e04c10e91a4aa2a2c19d9a885d.js'),locales=require('./common/locales/index.js'),cloud_functions_debugger_server_1=require('./common/cloud-functions-debugger-server/index.js'),tools_1=require('./84b183688a46c9e2626d3e6f83365e13.js'),sdkhijack=require('./9340ce4c919f13f0d7779c9c635be1ef.js'),utils_1=require('./d7de4e2985e29ada7cce551848a1bb26.js'),lstat=util_1.promisify(fs.lstat),readdir=util_1.promisify(fs.readdir);class SCFDebugIDEController{constructor(){this.id=uuid_1.v4(),this.launched=!1,this.functions=[],this.requests={},this.mergeFunctionsEnvInfo=(a)=>{const b=lodash_1.flatten(a),c={};for(const d of b)c[d.name]=c[d.name]?{local:d.local||c[d.name].local,namespace:[...new Set([...d.namespace,...c[d.name].namespace])]}:{local:d.local,namespace:d.namespace};const d=[];for(const b in c)d.push({name:b,local:c[b].local,namespace:c[b].namespace});return d},this.showDebugWindow=(a)=>{store.dispatch(windowActions.setCloud({scfdebug:{show:!0,authToken:this.client.authToken,functionId:a,assetBaseUrl:`http://127.0.0.1:${global.proxyPort}/cloud-functions-debugger-frontend/resource`,debuggerServerHost:"127.0.0.1",debuggerHTTPServerPort:this.serverPort,debuggerWebSocketServerPort:this.frontendWSPort,debuggerWebSocketConnectionToken:this.client.getWebSocketConnectionToken()}}))},this.callFunction=async(a,b,c)=>{if(utils_1.showInIDEConsole("info",a,locales.config.SCF_CALLING_LOCAL.format(b)),!this.client)throw new Error(`cloud functions debugger isn't started`);return this.client.callFunction(b,c).then((c)=>{const d=this.requests[a];if(!d)return void console.error(`req ${a} not found`);if(c.error)if(!0===c.error)throw c;else throw c.error;d.result=c.result,d.done=!0,d.onComplete&&d.onComplete(),utils_1.showInIDEConsole("info",a,[locales.config.SCF_CALL_LOCAL_SUCCESS.format(b),c.callGraph||""])}).catch((c)=>{const d=this.requests[a];return d?void(d.error=c&&c.message||c,d.done=!0,d.onComplete&&d.onComplete(),utils_1.showInIDEConsole("error",a,locales.config.SCF_CALL_LOCAL_FAIL.format(b))):void console.error(`req ${a} not found`)})},this.longPollHandler=async(a)=>{function b(a){return{base_resp:{ret:0},status:1,func_req_id:`local_debug_${e}`,service_errcode:0,content:a}}function c(){return{base_resp:{ret:0},status:1,func_req_id:`local_debug_${e}`,service_errcode:-1,service_errmsg:f.error}}const d=querystring.parse(a.query),e=d.event_id;if(!e||Array.isArray(e))throw new Error("poll url lacks of event_id");const f=this.requests[e];if(!f)throw new Error(`request ${e} not found`);return f.done?JSON.stringify(b(f.result)):f.error?JSON.stringify(c(f.error)):new Promise((a)=>{const d=setTimeout(()=>{f.done||(a(JSON.stringify({base_resp:{ret:0},status:0,func_req_id:`local_debug_${e}`})),delete f.onComplete)},25000);f.onComplete=()=>{clearTimeout(d),f.error?a(JSON.stringify(c(f.error))):a(JSON.stringify(b(f.result)))}})},this.getEnv=async()=>{const{body:a}=await request({url:urlConfig.getSCFDebugEnv,needToken:1,needAppID:1,needParse:1}),b={TENCENTCLOUD_RUNENV:"WX_LOCAL_SCF",TENCENTCLOUD_SECRETID:a.secretid,TENCENTCLOUD_SECRETKEY:a.secretkey,TENCENTCLOUD_SESSIONTOKEN:a.token,TCB_CONTEXT_KEYS:"TCB_ENV",TCB_ENV:"local",WX_CONTEXT_KEYS:"",WX_APPID:this.appid},c=["WX_APPID"];return a.openid&&(c.push("WX_OPENID"),b.WX_OPENID=a.openid),a.appuin&&(c.push("WX_APPUIN"),b.WX_APPUIN=a.appuin),a.useruin&&(c.push("WX_USERUIN"),b.WX_USERUIN=a.useruin),a.qbase_ticket&&(c.push("WX_API_TOKEN"),b.WX_API_TOKEN=a.qbase_ticket),b.WX_CONTEXT_KEYS=c.join(","),{env:b,expireTime:600}},this.__operateWXDataRemoteCallFunction__=(a,b,c,d)=>{return a(b,c,d)},this.__hijackedOperateWXData__=async(a,b,c,d)=>{if(!this.launched||!this.client)return a(b,c,d);if(!this.isWindowAlive())return this.stopDebugger(),a(b,c,d);if("qbase_commapi"===c.args.apiName&&"tcbapi_slowcallfunction"===c.args.data.data.qbase_api_name){const e=c.args.data.data,g=JSON.parse(e.qbase_req),f=this.functions.find((a)=>a.name===g.function_name);if(!f)return a(b,c,d);const{function:h}=await this.client.getFunction(f.id);if(!h.inspectURL)return a(b,c,d);const i=uuid_1.v4();return this.requests[i]={functionInfo:f,done:!1,result:null,error:null},this.callFunction(i,f.id,JSON.parse(g.data)),{errMsg:`${c.api}:ok`,data:{signature:"",data:JSON.stringify({baseresponse:{errcode:0},event_id:i,poll_url:`http://127.0.0.1:${global.proxyPort}/cloudfunctions/pollresult?event_id=${i}`,status:0})}}}return a(b,c,d)};let a=store.getState().settings.appearance.theme||"white",b=store.getState().settings.appearance.devtoolsTheme||"default";store.subscribe(()=>{if(this.launched){const c=store.getState();lodash_1.get(c,"window.cloud.scfdebug.show")||(log.info(`found scfdebug window state is closed, stopping...`),this.stopDebugger()),this.client&&(c.settings.appearance.theme!==a&&(this.client.updatePreference({theme:c.settings.appearance.theme}),a=c.settings.appearance.theme),c.settings.appearance.devtoolsTheme!==b&&(this.client.updatePreference({devtoolsTheme:c.settings.appearance.devtoolsTheme}),b=c.settings.appearance.prevDevtoolsTheme))}}),this.refreshSecret(),locales.onChangeLocale(()=>{this.launched&&this.client&&this.client.updatePreference({locale:locales.getLocale()})})}async launchDebugger(a){try{if(this.appid=a.project.appid,this.launched)if(!this.isWindowAlive())await this.stopDebugger();else return a.debugFunction&&(await this.client.inspectFunction(a.debugFunction),await this.client.openFunctionFrontend(a.debugFunction)),void this.showWindow();await this.launchDebuggerServer(a),await this.launchDebuggerFrontend(a),await this.launchWebSocketServer(a),await this.launchWebSocketClient(a),await this.launchIDEInterception(a),log.info(`Launch debugger success`),this.launched=!0;try{global.client=this.client;const b=a.debugFunction;b&&(await this.client.inspectFunction(b),await this.client.openFunctionFrontend(b))}catch(a){log.info(`Launch debugger success, but auto inspect function fail: ${a}`)}}catch(a){throw new Error(`Launch debugger fail with error: ${a&&a.stack}`)}}async stopDebugger(){if(this.launched=!1,this.client)return this.client.stop()}async launchDebuggerServer(a){const b=this.serverPort=await tools_1.getAvailablePort(),c=this.frontendWSPort=await tools_1.getAvailablePort(),d=a.project.cloudfunctionTemplateRoot||"cloudfunctionTemplate";a.project.cloudfunctionTemplateRoot||store.dispatch(projectActions.setTcbFnTemplateRoot(d));let e=path.join(path.dirname(process.execPath),"node");"darwin"!==process.platform&&(e+=".exe"),this.client=new cloud_functions_debugger_server_1.FunctionClient({host:"127.0.0.1",port:b,logLevel:global.appConfig.isDev?"debug":"info",frontendWebSocketPort:c,getProxyForURL:proxy.getProxyForURL,getEnv:this.getEnv,preference:{locale:locales.getLocale(),theme:store.getState().settings.appearance.theme,devtoolsTheme:store.getState().settings.appearance.devtoolsTheme},templateRoot:path.join(a.project.projectpath,d),persistenceId:a.project.projectid,config:{nodeBinaryPath:e}});const[f,g]=await Promise.all([await this.getLocalFunctions(a.project),await this.getCloudFunctions(),await this.client.start()]),h=this.mergeFunctionsEnvInfo([f.map((a)=>({name:a,local:!0,namespace:[]})),g]),{cloudfunctionRoot:i,projectpath:j}=a.project;if(null===i||void 0===i)throw new Error(`cloudfunctionRoot not found`);const k=h.map(async(b)=>{try{const c={id:b.name,name:b.name,dir:path.join(j,i,b.name),entryFile:"index.js",mainHandler:"main",triggerType:"event",interceptMiniProgramCall:b.name===a.debugFunction,interceptLocalFunctionsCall:b.name===a.debugFunction,inspect:!0,inspectBrk:!1,autoReloadOnFileChange:"disabled",existsLocally:!!b.local,existsCloud:b.namespace,multiWorker:!1,workers:[]};return c.existsLocally?(await this.client.createFunction(c),{code:0,id:b,info:c}):{code:-101,id:b,error:"lack of local"}}catch(a){return{code:-1,id:b,error:a}}}),l=await Promise.all(k);return l.forEach((a)=>{0===a.code?this.functions.push(a.info):console.error(`function ${a.id} create failed with code ${a.code} and error: ${a.error}`)}),l}launchDebuggerFrontend(a){const b=store.getState(),c=windowRegistry.get(C.WINDOW_REGISTRY.CLOUD_SCF_DEBUGGER);lodash_1.has(b.window,"cloud.scfdebug.show")?this.isWindowAlive()&&c?c.show():(windowRegistry.unregister(C.WINDOW_REGISTRY.CLOUD_SCF_DEBUGGER),store.dispatch(windowActions.setCloud({scfdebug:{show:!1}})),this.showDebugWindow(a.debugFunction)):this.showDebugWindow(a.debugFunction)}async launchWebSocketServer(){}async launchWebSocketClient(){}launchIDEInterception(){sdkhijack.isHijackEnabled(sdkhijack.SDK_TYPE.APPSERVICE_SDK)||sdkhijack.enableHijack(sdkhijack.SDK_TYPE.APPSERVICE_SDK),sdkhijack.setHijack(sdkhijack.SDK_TYPE.APPSERVICE_SDK,"operateWXData",this.__hijackedOperateWXData__)}async getLocalFunctions(a){const{cloudfunctionRoot:b,projectpath:c}=a,d=await readdir(path.join(c,b)),e=await Promise.all(d.map((a)=>{return lstat(path.join(c,b,a)).then((a)=>a.isDirectory())})),f=[];for(let b=0,c=d.length;b<c;b++)e[b]&&f.push(d[b]);return f}async getCloudFunctions(){const a=async(a)=>{const b=await tcbApi.getTcbFuncList({namespace:a,pageIndex:0,pageSize:100});return b.Functions.map((a)=>{return{name:a.FunctionName,namespace:[a.Namespace]}})};try{const{env_list:b}=await tcbApi.getEnvList({}),c=await Promise.all(b.map((b)=>{return a(b.namespace)}));return this.mergeFunctionsEnvInfo(c)}catch(a){try{const a=store.getState().project.current.tcb.scfMapInEnv,b=[];for(const c in a)for(const d in a[c]){const a=b.find((a)=>a.name===d);a?a.namespace.push(c):b.push({name:d,namespace:[c]})}return b}catch(a){return log.error(`[cloud-functions-debugger-ide-controller] getCloudFunctions failed ultimately with error: ${a}`),[]}}}refreshSecret(){return tcbApi.getTmpSecret().then((a)=>{return this.tmpSecret=a,a})}async getTCBSecretEnv(){return this.tmpSecret&&this.tmpSecret.secretId||(await this.refreshSecret()),{TENCENTCLOUD_SECRETID:this.tmpSecret.secretId,TENCENTCLOUD_SECRETKEY:this.tmpSecret.secretKey,TENCENTCLOUD_SESSIONTOKEN:this.tmpSecret.token}}async getWXContextEnv(){return{}}isWindowAlive(){try{const a=global.windowMap.get(C.WINDOW_REGISTRY.CLOUD_SCF_DEBUGGER);return!!a.height}catch(a){return!1}}showWindow(){try{const a=global.windowMap.get(C.WINDOW_REGISTRY.CLOUD_SCF_DEBUGGER);return void a.show()}catch(a){}}}const controller=new SCFDebugIDEController;exports.default=controller;
;}(require("lazyload"), require);
