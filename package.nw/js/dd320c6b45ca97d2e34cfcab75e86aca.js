;!function(require, directRequire){;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const adb=require("adbkit"),path=require("path"),utils_1=require('./46d7303eb986fa402d60bf5e929aa077.js'),ADB_PATH=(()=>{return utils_1.isMac?utils_1.isDev?path.join(__dirname,"../../../../../bin/adb-macos/adb"):path.join(process.execPath,"../../../../../Resources/bin/adb-macos/adb"):utils_1.isDev?path.join(__dirname,"../../../../../bin/adb-win/adb.exe"):path.join(process.execPath,"bin/adb-win/adb.exe")})();let _client;function getClient(){return _client||(_client=adb.createClient({bin:ADB_PATH})),_client}exports.getClient=getClient;function listDevices(){return new Promise((a,b)=>{getClient().listDevices().then((b)=>{a(b)}).catch((a)=>{b(a)})})}exports.listDevices=listDevices;function reverse(a,b,c){return new Promise((d,e)=>{getClient().reverse(a,b,c).then((a)=>{d(a)}).catch((a)=>{e(a)})})}exports.reverse=reverse;function version(){return new Promise((a,b)=>{getClient().version().then((b)=>{a(b)}).catch((a)=>{b(a)})})}exports.version=version;function kill(){return new Promise((a,b)=>{_client?getClient().kill().then((b)=>{_client=null,a(b)}).catch((a)=>{b(a)}):a(!0)})}exports.kill=kill;
;}(require("lazyload"), require);
