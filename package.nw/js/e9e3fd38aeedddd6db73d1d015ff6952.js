;!function(require, directRequire){;'use strict';const BaseMessager=directRequire('./214c25062f31e2cad941b3ec069db1fe.js');class PluginMessager extends BaseMessager{constructor(a){super(a),this.persistId=null,this.simulatorHookMethodCallbackMap=new Map}onMessage(a){try{const{command:b,data:c,callbackID:d}=JSON.parse(a);switch(b){case'PLUGIN_STORAGE_GET_ITEM':{try{if(!this.persistId||!c.key)return;const a=localStorage.getItem(`plugin_${this.persistId}:${c.key}`);this.callback(d,{success:!0,value:a})}catch(a){this.callback(d,{error:a.toString()})}return}case'PLUGIN_STORAGE_SET_ITEM':{try{if(!this.persistId||!c.key)return;localStorage.setItem(`plugin_${this.persistId}:${c.key}`,c.value),this.callback(d,{success:!0})}catch(a){this.callback(d,{error:a.toString()})}return}case'PLUGIN_STORAGE_REMOVE_ITEM':{try{if(!this.persistId||!c.key)return;localStorage.removeItem(`plugin_${this.persistId}:${c.key}`),this.callback(d,{success:!0})}catch(a){this.callback(d,{error:a.toString()})}return}case'SIMULATOR_PLUGIN_HOOK_CALLBACK_RETURN':{if(this.simulatorHookMethodCallbackMap.get(d)){this.simulatorHookMethodCallbackMap.get(d).resolve(c);const a=this.simulatorHookMethodCallbackMap.get(d).timer;a&&clearTimeout(a),this.simulatorHookMethodCallbackMap.delete(d)}return}}}catch(a){}super.onMessage(a)}triggerOnEvent(a,b){this.send({command:'ON_EVENT',data:{eventName:a,res:b}})}callback(a,b){this.send({command:'INVOKE_CALLBACK',data:{callbackID:a,res:b}})}simulatorHookMethodCallback(a,b,c,d){return new Promise((e)=>{const f={callbackID:b.callbackID,args:c};4===arguments.length&&(f.eventName=d);const g=a.split('_'),h='BEFORE'===g[2],i='INVOKE'===g[3];let j;if(j=h?i?{args:c}:{data:c}:c,!b.options.noTimeout){const a=setTimeout(()=>{e(j)},b.options.timeout||1e3);this.simulatorHookMethodCallbackMap.set(b.callbackID,{resolve:e,timer:a})}else this.simulatorHookMethodCallbackMap.set(b.callbackID,{resolve:e});this.send({command:'SIMULATOR_PLUGIN_HOOK_CALLBACK',data:f})})}}const messagerMap=new Map,getMessager=(a)=>{if(messagerMap.has(a))return messagerMap.get(a);const b=new PluginMessager(`PLUGIN_${a}`);return b.ready=!0,messagerMap.set(a,b),b};module.exports={get:getMessager};
;}(require("lazyload"), require);
