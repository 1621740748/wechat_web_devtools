;!function(require, directRequire){;"use strict";const interruptibletask_1=require('./f87c21baecac660695b0d3124dbebed6.js'),CheckReservedDirectories=require('./fba5323ca1afcd71487791d6c5856665.js'),fs=require("fs"),path=require("path"),_=require("lodash"),glob=require("glob"),zlib=require("zlib"),rmdir=require("rmdir"),taskQueue=require('./a932aac82ac84fc9c6c92194bd88204e.js'),projectManager=require('./3bfffbe88b3d923921f851c0697974fe.js'),checkAppConfig=require('./1dea83a77e99a7c94f6b6f01f5c175b0.js'),checkGameAppConfig=require('./1bd2563d13db26950ae47494b2c34454.js'),ProgressRecorder=require('./664c85134de31b9a04ff1f03a1492daf.js'),locales=require('./common/locales/index.js'),build=require('./911222a6723da8db7ca8a8e3689591e1.js'),uglifyFileNames=require('./890791d99e6d0eadf6a5a73d8d797338.js'),fileRules=require('./1c8a8c710417d102ab574145dc51b4b0.js'),dirConfig=require('./92320c1386e6db6a6f2556736a9bc280.js'),pack=require('./e5fa35c3c8e81bc6466b4b8eb436113b.js'),apperrcodeConfig=require('./949d8235c744ced2a80121e4dba34c28.js'),ls=require('./84858de8a097c9cf84ff2c2e3d86e2a9.js'),urlConfig=require('./f171257bbcaef547a3cf27266ccb0db2.js'),compileTypeConfig=require('./9fdd4ac31a05c27355910f0d74accd4c.js'),request=require('./15ba1827c7f6564a45df6bd44da3a977.js'),report=require('./da7c31daaf542cf1796023d8e344b98a.js'),topTools=require('./84b183688a46c9e2626d3e6f83365e13.js'),{getReservedDirectoryPatterns}=CheckReservedDirectories,noop=()=>{},weAppDestPath=dirConfig.Weappdest;class UploadTask extends interruptibletask_1.InterruptibleTask{constructor(a){super(a)}progressStart(){const a=this._args[0];a.showProgress&&(this.progressTaskId=`upload-code-${+new Date}-${Math.random()}`,ProgressRecorder.get().add({id:this.progressTaskId,name:locales.config.UPLOAD_CODE,successName:`${locales.config.UPLOAD_CODE}${locales.config.PUNCTUATION_SEPARATOR}${locales.config.DONE}`,failName:`${locales.config.UPLOAD_CODE}${locales.config.PUNCTUATION_SEPARATOR}${locales.config.FAILED}`,type:"upload",progressIndeterminate:!0}))}progressSuccess(a){const b=this._args[0];if(b.showProgress){if(a&&a.wxpkg_size){const b=`${locales.config.UPLOAD_SIZE_IN_BACKEND}${locales.config.COLON}${locales.config.PUNCTUATION_SEPARATOR}${topTools.getFormattedSize(a.wxpkg_size)}`;ProgressRecorder.get().updateDetails(this.progressTaskId,b)}ProgressRecorder.get().markSuccess(this.progressTaskId)}}progressFail(a){const b=this._args[0];b.showProgress&&(ProgressRecorder.get().updateDetails(this.progressTaskId,a.toString()),ProgressRecorder.get().markFail(this.progressTaskId))}async getMaxCodeSize(a,b){let c,d=2;return c=projectManager.isGameApp(a)?await checkGameAppConfig(a):await checkAppConfig(a),d=c.subPackages?b.setting.MaxSubpackageFullCodeSize||b.setting.MaxCodeSize:b.setting.MaxCodeSize,1024*d}globAsync(a,b){return new Promise((c)=>{glob(a,b,(a,b)=>{a?c([]):c(b)})})}abort(){this._aborted||(this._aborted=!0,this._buildInstance&&"function"==typeof this._buildInstance.abort&&this._buildInstance.abort(),this._requestInstance&&"function"==typeof this._requestInstance.abort&&this._requestInstance.abort())}async onFilesMissing(a,b,c){const d=this._args[0];if("function"!=typeof d.onFilesMissing)return;let e=a.projectpath;"plugin"===a.compileType?e=a.projectpath:a.miniprogramRoot&&(e=path.posix.join(a.projectpath,a.miniprogramRoot));const f=await this.globAsync("**",{nodir:!0,ignore:c,nosort:!0,strict:!1,silent:!0,cwd:e,absolute:!1,mark:!0,dot:!0}),g=f.filter((a)=>0>b.findIndex((b)=>b===a))||[],h=(await this.globAsync("**/node_modules/",{nosort:!0,strict:!1,silent:!0,cwd:e,absolute:!1,mark:!0,dot:!0}))||[];g.push(...h),d.onFilesMissing(g)}async calculatePackSize(a,b,c,d){const f=await this.getMaxCodeSize(a,b);let e=c.totalSize;if(projectManager.isGameApp(a)){const b=await checkGameAppConfig(a);if(b.loadingImageInfo&&b.loadingImageInfo.path){const a=fs.statSync(path.join(d,b.loadingImageInfo.path));e-=a.size}}const g=Math.floor(e/1024);if(g>f){const a=new Error(locales.config.CODE_SIZE_EXCEED.format([g,f]));throw a.code=apperrcodeConfig.CODE_SIZE_EXCEED,a}}formatUrl(a){const b=this._args[0],c=global.appConfig.isBeta;let d="";if(b.test){if(b.remoteDebug){let a=b.cdpEnabled?4:1;"ios"===b.remoteDebugLocal?a=2:"android"===b.remoteDebugLocal&&(a=3);const c=b.remoteProxyPort||0,e=b.disableUrlCheck?1:0;d=`${urlConfig.testSourceURL}?gzip=1&open_remote=yes&remote_network_type=${a}&remote_proxy_port=${c}&disable_url_check=${e}&remote_support_compress_algo=1`}else d=c?`${urlConfig.testSourceNewFeatureURL}?gzip=1`:`${urlConfig.testSourceURL}?gzip=1`;b.autoPreview&&!b.remoteDebug&&(d+="&hot_update=yes");const{page:e,query:f,searchQuery:g,boxQI:h}=b;if(e){const a=encodeURIComponent(`${e}?${f}`);d=`${d}&path=${a}`}if(projectManager.isGameApp(a)&&f){const a=encodeURIComponent(`?${f}`);d=`${d}&path=${a}`}if(g&&(d=`${d}&search_query=${encodeURIComponent(g)}`),h){d=`${d}&search_extInfo=${encodeURIComponent(JSON.stringify({box_qi:h}))}`}}else{const a=encodeURIComponent(b.desc||""),e=encodeURIComponent(b.version||""),f=encodeURIComponent(b.uuid||"");d=c?`${urlConfig.commitSourceNewFeatureURL}?user-version=${e}&user-desc=${a}&uuid=${f}&gzip=1`:`${urlConfig.commitSourceURL}?user-version=${e}&user-desc=${a}&uuid=${f}&gzip=1`}return d}async run(a){try{const b=a.onProgressUpdate||noop;let c,d;a.tempProject?(c=a.tempProject.attr,d=a.tempProject):(c=projectManager.getCurrentConfig(),d=projectManager.getCurrent()),this.progressStart(),b("buildstart",locales.config.COMPILING_CODE),this._buildInstance=build(d,{noCompile:!0,onProgressUpdate:b,onFilesIgnored:a.onFilesIgnored});const e=await this._buildInstance;if(this._aborted)throw interruptibletask_1.AbortEvent;b("globfiles",locales.config.COMPARING_FILE_LIST);const f=getReservedDirectoryPatterns(),g=["**/.git/**",".git/**/*","**/.svn/**",".svn/**/*",".DS_Store","**/.DS_Store",...f];"plugin"===d.compileType&&g.push("doc/**/*");let h=await this.globAsync("**",{nodir:!0,ignore:g,nosort:!0,strict:!1,silent:!0,cwd:e,absolute:!1,mark:!0,dot:!0});if(this._aborted)throw interruptibletask_1.AbortEvent;const i=uglifyFileNames.getFileNameMapping(),j=_.invert(i);h=h.map((a)=>{return"string"==typeof j[a]?j[a]:a});let k=[];d.packOptions&&d.packOptions.ignore&&(k=d.packOptions.ignore),a.remoteDebug&&a.noMaps&&(k=[...k,{type:"suffix",value:".map"}]);const l=[];for(const a of h){const b=path.posix.join(d.miniprogramRoot||"",a);if(!fileRules.isFileIgnored(a,k)&&!fileRules.isIngoreByProjectConfig(d,b))l.push(a);else try{const b="string"==typeof i[a]?i[a]:a;fs.unlinkSync(path.join(e,b))}catch(a){console.error(a)}}if(h=l,this._aborted)throw interruptibletask_1.AbortEvent;if(await this.onFilesMissing(d,h,g),this._aborted)throw interruptibletask_1.AbortEvent;b("buildend",locales.config.CODE_COMPILATION_COMPLETED),b("packstart",locales.config.PACKING);const m=path.join(weAppDestPath,`${+new Date}.wx`),n=await pack(e,m);if(await this.calculatePackSize(d,c,n,e),fs.unlink(m,()=>{}),rmdir(e,()=>{}),b("packend",locales.config.PACK_COMPLETED),this._aborted)throw interruptibletask_1.AbortEvent;b("uploadstart",locales.config.UPLOADING);const o=this.formatUrl(d),p=zlib.gzipSync(n.data),q=Date.now(),r=a.tempProject?{url:`${o}&appid=${a.tempProject.appid}&devplugin=${d.compileType===compileTypeConfig.plugin?1:0}`,method:"post",body:p,needToken:1}:{url:`${o}&devplugin=${d.compileType===compileTypeConfig.plugin?1:0}`,method:"post",body:p,needToken:1,needAppID:1};a.tempProject&&a.tempProject.attr&&a.tempProject.attr.platform&&(r.url+="&platform=1",a.tempProject.runtimeAttr&&a.tempProject.runtimeAttr.isExtAppId&&(r.url+=`&ext_appid=${a.tempProject.runtimeAttr.appid||""}`)),this._requestInstance=request(r);const{body:s}=await this._requestInstance;return b("uploadend",locales.config.UPLOAD_COMPLETED),this.progressSuccess(s),report(a.test?"client_test_source_time":"client_commit_source_time",d.appid,`${Date.now()-q}`),s}catch(a){throw this.progressFail(a),a}}}const upload=(a)=>{return new UploadTask(a)};module.exports=(a)=>{return taskQueue.enqueueBuildTask(upload.bind(null,a),taskQueue.buildType.upload)};
;}(require("lazyload"), require);
